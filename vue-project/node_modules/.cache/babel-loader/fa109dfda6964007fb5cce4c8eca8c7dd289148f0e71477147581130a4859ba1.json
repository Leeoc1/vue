{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Calculator\", -1 /* HOISTED */)), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.state.num1 = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.state.num1]]), _cache[2] || (_cache[2] = _createElementVNode(\"span\", null, \"+\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.state.num2 = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.state.num2]]), _cache[3] || (_cache[3] = _createElementVNode(\"span\", null, \"=\", -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString($setup.state.result), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","type","_cache","$event","$setup","state","num1","num2","_toDisplayString","result"],"sources":["C:\\Users\\cau\\Desktop\\Workspace\\vue\\vue-project\\src\\views\\CompositionApi2.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Calculator</h2>\r\n    <div>\r\n      <input type=\"text\" v-model=\"state.num1\" />\r\n      <span>+</span>\r\n      <input type=\"text\" v-model=\"state.num2\" />\r\n      <span>=</span>\r\n      <span>{{ state.result }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive, computed } from \"vue\";\r\nexport default {\r\n  name: \"Calculator2\",\r\n  setup() {\r\n    let state = reactive({\r\n      num1: 0,\r\n      num2: 0,\r\n      result: computed(() => parseInt(state.num1) + parseInt(state.num2)),\r\n    });\r\n    return {\r\n      state,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";;uBACEA,mBAAA,CASM,c,0BARJC,mBAAA,CAAmB,YAAf,YAAU,sBACdA,mBAAA,CAMM,c,gBALJA,mBAAA,CAA0C;IAAnCC,IAAI,EAAC,MAAM;IAJxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIkCC,MAAA,CAAAC,KAAK,CAACC,IAAI,GAAAH,MAAA;iDAAVC,MAAA,CAAAC,KAAK,CAACC,IAAI,E,6BACtCN,mBAAA,CAAc,cAAR,GAAC,sB,gBACPA,mBAAA,CAA0C;IAAnCC,IAAI,EAAC,MAAM;IANxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMkCC,MAAA,CAAAC,KAAK,CAACE,IAAI,GAAAJ,MAAA;iDAAVC,MAAA,CAAAC,KAAK,CAACE,IAAI,E,6BACtCP,mBAAA,CAAc,cAAR,GAAC,sBACPA,mBAAA,CAA+B,cAAAQ,gBAAA,CAAtBJ,MAAA,CAAAC,KAAK,CAACI,MAAM,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}